# This project used Spotify data from Kaggle
# I created a table to insert the data, then I uploaded the .csv to the table
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

# What is the quietest song, and how popular is it?
SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY loudness
LIMIT 1;

# How many songs are over 160 BPM?
SELECT COUNT(*) AS number_of_songs
FROM BIT_DB.spotifydata
WHERE tempo > 160;

# List all songs under 100 BPM, including their energy and popularity.
SELECT artist_name, track_name, energy, popularity
FROM BIT_DB.Spotifydata
WHERE tempo < 100;

# What is the name, popularity, and danceability of the least popular song?
SELECT artist_name, track_name, popularity, danceability
FROM BIT_DB.spotifydata
ORDER BY popularity
LIMIT 1;

# List all songs by Bad Bunny and rank them by popularity.
SELECT track_name, popularity
FROM BIT_DB.Spotifydata
WHERE artist_name = 'Bad Bunny'
ORDER BY popularity DESC;

# Which artists have multiple songs in the Top 50, and how many songs do they have?
SELECT artist_name, COUNT(artist_name)
FROM BIT_DB.spotifydata
GROUP BY artist_name
HAVING COUNT(artist_name) >= 2;

# Which songs have an energy level under 0.5, and what is the key of those songs?
SELECT artist_name, track_name, 
CASE 
    WHEN song_key = 11 THEN 'B' 
    WHEN song_key = 10 THEN 'A#' 
    WHEN song_key = 9 THEN 'A' 
    WHEN song_key = 8 THEN 'G#' 
    WHEN song_key = 7 THEN 'G' 
    WHEN song_key = 6 THEN 'F#' 
    WHEN song_key = 5 THEN 'F' 
    WHEN song_key = 4 THEN 'E' 
    WHEN song_key = 3 THEN 'D#' 
    WHEN song_key = 2 THEN 'D' 
    WHEN song_key = 1 THEN 'C#' 
    ELSE 'C' 
END AS song_key
FROM BIT_DB.Spotifydata
WHERE energy < 0.5;

# What is the average danceability of all the songs?
SELECT AVG(danceability)
FROM BIT_DB.spotifydata;

# What is the most common key among the songs, and how many songs are in that key?
SELECT
CASE 
    WHEN song_key = 11 THEN 'B' 
    WHEN song_key = 10 THEN 'A#' 
    WHEN song_key = 9 THEN 'A' 
    WHEN song_key = 8 THEN 'G#' 
    WHEN song_key = 7 THEN 'G' 
    WHEN song_key = 6 THEN 'F#' 
    WHEN song_key = 5 THEN 'F' 
    WHEN song_key = 4 THEN 'E' 
    WHEN song_key = 3 THEN 'D#' 
    WHEN song_key = 2 THEN 'D' 
    WHEN song_key = 1 THEN 'C#' 
    ELSE 'C' 
END AS song_key, COUNT(song_key) AS number_of_songs
FROM BIT_DB.spotifydata
GROUP BY song_key
ORDER BY number_of_songs DESC
LIMIT 1;
